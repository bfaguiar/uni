package exercicio2;

import java.util.*;
import java.util.Map.Entry;

import static java.lang.System.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class BB implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	static Scanner sc = new Scanner(System.in);
	
	public static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException {
		
		Set<String> funcionarios = new TreeSet<>();
		HashMap<String, Brinquedo> funcionariosPremiados = new HashMap<>();
		
		int opcao;
		do{
			menu();
			opcao = sc.nextInt();
			
			switch(opcao){
				
				case 1: 
					adicionar(funcionarios);
				break;
			
				case 2:
					remover(funcionarios);
				break;
			
				case 3:
					listarEmpregados(funcionarios);
				break;
			
				case 4:
					sortear(funcionarios, funcionariosPremiados);
				break;
			
				case 5:
					listarSorteados(funcionariosPremiados);
				break;
				
				case 7:
					save(funcionarios, funcionariosPremiados);
					break;
				
				case 8:
					funcionarios = carregarEmpregados();
					break;
				case 10:
					funcionariosPremiados = carregarSorteio();
					break;
			
			}
			System.out.println();
			}while(opcao!=9);
			
		}
		
		//funcionarios.forEach(out::println);
	
	public static void menu() {
		out.println("-------------------------");
		out.println("1-Adicionar Empregado");
		out.println("2-Remover Empregado");
		out.println("3-Listar Empregados");
		out.println("4-Sortear Empregado");
		out.println("5-Listar Sorteados");
		out.println("6-Entregar Bilhetes");
		out.println("7-Gravar data");
		out.println("8-Carregar empregados");
		out.println("10-Carregar sorteio");
		out.println("9-Sair");
		out.print("Opcao -> ");
	}
	
	public static void adicionar(Set<String> funcionarios) {
		sc.nextLine();
		out.printf("Nome: ");
		String nome = sc.nextLine();
		funcionarios.add(nome);
	}
	
	public static void remover(Set<String> func) {
		sc.nextLine();
		out.printf("Nome: ");
		String nome = sc.nextLine();
		if(func.contains(nome))
			func.remove(nome);
		else throw new IllegalArgumentException("Nome invalido: insira um nome existente na lista");
	}
	
	public static void listarEmpregados(Set<String> func) {
		func.forEach(out::println);
	}
	
	public static void sortear(Set<String> func, HashMap<String, Brinquedo> mapa) {
		int PessoaID = (int) (Math.random()*func.size());
		int BrinquedoID = (int) (Math.random()*5);
		List<String> lista = new ArrayList<>();
		lista.addAll(func);
		mapa.put(lista.get(PessoaID), Brinquedo.values()[BrinquedoID]);
	}
	
	public static void listarSorteados(HashMap<String, Brinquedo> mapa) {
		for(Entry<String, Brinquedo> entrada : mapa.entrySet()) {
			String nome = entrada.getKey();
			Brinquedo brinquedo = entrada.getValue();
			out.println("\nNOME: " + nome + "\n" + "BRINQUEDO: " + brinquedo + "." + "\n\n");
		}
	}
	
	public static void save(Set<String> func, HashMap<String, Brinquedo> mapa) throws FileNotFoundException, IOException {
		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File("saveFuncioanrios.txt")));
		ObjectOutputStream oos2 = new ObjectOutputStream(new FileOutputStream(new File("saveSorteio.txt")));
		oos.writeObject(func);
		oos.close();
		oos2.writeObject(mapa);
		oos.close();
		out.println("LOG: Objecto gravado");
	}
	
	public static Set<String> carregarEmpregados() throws FileNotFoundException, IOException, ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File("saveFuncioanrios.txt")));
		Set<String> func = (Set<String>) ois.readObject();
		ois.close();
		return func;
	}
	
	public static HashMap<String, Brinquedo> carregarSorteio() throws FileNotFoundException, IOException, ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File("saveSorteio.txt")));
		HashMap<String, Brinquedo> sorteio = (HashMap<String, Brinquedo>) ois.readObject();
		ois.close();
		return sorteio;
	}
}
